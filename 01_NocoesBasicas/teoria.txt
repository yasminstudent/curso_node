---------- Criando Primeiro Projeto ----------
Entrar na pasta desejada e rodar o comando:
npm init
ou npm init -y

---------- Instalando o Typescript no projeto ----------
Comando para instalar o typescript: npm install -g typescript
Iniciando arquivo de configuração: tsc --init

Caso o comando acima dê erro:
Opa....faz o seguinte, abre o powerShell do windows como administrador e da
 Set-ExecutionPolicy Unrestricted
dai tu responde SIM, depoiis tenta, vai dar certo.

---------- Configurando o Typescript ----------
Entendendo a estrutura do projeto:
Pastas:
    src -> source (fonte) -> código fonte (código em typescript)
    dist -> arquivos de distribuição -> código compilado
    node_modules -> módulos do node

Ligar monitoramento para mudanças de arquivos 
(p/ ir compilando conforme formos modificando os arquivos da pasta src):

Terminal 1: 
tsc -w

Testar se pegou as mudanças:
Terminal 2:
node dist/index.js

---------- Scripts do package.json ----------
No arquivo package.json podemos adicionar atalhos de comandos, ex:

 "scripts": {
    "watch-ts": "tsc -w",
    "start": "node dist/index.js",
    "exemplo": "comando 1 && comando 2"
 },

E então basta executar o comando:
npm run watch-ts
npm run start
etc

---------- Entendendo import/export em CommonJS ----------
Para trabalhar com + de 1 arquivo (ou módulo, como o node chama)

export -> habilitar para uso em outros arquivos
    * pode-se exportar string, variaveis, funções etc
    module.exports.example = nomeDaFuncaoCriadaNoArquivo;

import -> usar determinado arquivo dentro de outro
    const whatever = require('./NomeDoOutroArquivo');
    const whatever2 = require('./NomeDoOutroArquivo').example;

---------- Entendendo import/export em ES6 ----------
Para exportar:

export let versao: string = "1.0";
export function somar(){...}

Para importar:
import * as Matematica from "./Matematica"; #importa tudo
    nesse caso para se usar os recursos seria assim:
    Matematica.somar();
    Matematica.versao;

import {versao, somar} from "./Matematica";
    nesse caso para se usar os recursos seria assim:
    somar();
    versao;


ou pode-se exportar um único objeto:
export default {
    nomeQueEuQueroChamar: nomeDaFuncaoOuVariavelNoArquivo,
    seONomeQueEuQueroChamarÉOMesmoNomeQueEstaNoArquivoPodeColocarAssim
}
Ex:
export default {
    somar,
    subtrair,
    numVersao: versao
}

nesse caso o import e o uso seria assim:

import Matematica from "./Matematica";
Matematica.somar();

---------- Importando arquivos terceiros ----------
Ex de comando: npm install validator
Ex 2 (suporte para typescript, mas é necessário instalar a padrão primeiro): npm install --save-dev @types/validator

Importando: import validator from "validator";

Usando: console.log(validator.isIP(ip));

---------- Conhecendo o Nodemon ----------
É uma biblioteca para trabalhar com node, monitorando mudanças em arquivos

Comando para instalar: npm install -g nodemon
Comando para usar o nodemon: nodemon dist/index.js

---------- Usando Nodemon com Typescript ----------

Comando para instalar: npm install -g ts-node
Essa biblioteca converte o typescript em javascript e dps roda o arquivo javascript

Ao instala-la podemos usar via nodemon:
nodemon src/index.ts

(Por baixo dos panos ele irá rodar o comando ts-node src/index.ts)

---------- Instalando o Express e criando um servidor ----------
comandos usados:
npm install express
npm install @types/express
npm run start-dev

---------- Trabalhando com rotas ----------
Rota estática:

server.get('/', (req: Request, res: Response) => {
    res.send("Olá Mundo");
});

Rota dinâmica: 

server.get('/noticia/:slug', (req: Request, res: Response) => {
    let slug: string = req.params.slug;
    res.send(`Notícia: ${slug}`);
});

server.get('/voo/:origem-:destino', (req: Request, res: Response) => {
    let {origem, destino} = req.params;
    res.send(`Voos de ${origem} a ${destino}`);
});